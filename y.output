Terminals unused in grammar

    DO
    FOR
    STRUCT
    DEFAULT
    CONST
    BREAK
    CONTINUE
    GOTO
    DOT
    DEREFERENCE
    MODULO
    NOT_EXP
    STRING
    _ELSE_
    "declaration"


State 71 conflicts: 1 reduce/reduce
State 119 conflicts: 5 shift/reduce
State 120 conflicts: 5 shift/reduce
State 121 conflicts: 5 shift/reduce
State 122 conflicts: 5 shift/reduce


Grammar

    0 $accept: Start $end

    1 Start: Decl Start
    2      | function Start
    3      | ε

    4 $@1: ε

    5 Decl: var_type L SEMICOLON $@1

    6 L: id_array
    7  | L COMMA id_array

    8 id_array: ID DIMLIST

    9 DIMLIST: DIMLIST LEFT_SQ_BRACKET INTEGER RIGHT_SQ_BRACKET
   10        | ε

   11 function: func_head LEFT_CURLY_BRACKET body RIGHT_CURLY_BRACKET

   12 func_head: res_id LP paramlist RP

   13 res_id: var_type ID
   14       | VOID ID
   15       | var_type MAIN
   16       | VOID MAIN

   17 paramlist: params
   18          | ε

   19 params: params COMMA param
   20       | param

   21 param: var_type ID

   22 body: stmt_list
   23     | ε

   24 stmt_list: stmt_list stmt
   25          | stmt

   26 stmt: Decl
   27     | funccall_stmt
   28     | asg
   29     | cond_stmt
   30     | while_stmt
   31     | return_stmt
   32     | scoped_stmt

   33 scoped_stmt: nest_begin stmt_list nest_end

   34 nest_begin: LEFT_CURLY_BRACKET

   35 nest_end: RIGHT_CURLY_BRACKET

   36 asg: lhs ASSIGN_OP expr SEMICOLON

   37 lhs: ID
   38    | array_elem

   39 funccall_stmt: func_call SEMICOLON

   40 func_call: ID LP explist RP

   41 explist: elist
   42        | ε

   43 elist: elist COMMA expr
   44      | expr

   45 expr: const
   46     | array_elem
   47     | ID
   48     | LP expr RP
   49     | func_call
   50     | const operator expr
   51     | ID operator expr
   52     | func_call operator expr
   53     | expr comparator expr

   54 const: INTEGER
   55      | REAL
   56      | CHARACTER

   57 comparator: LTE
   58           | GTE
   59           | EQ
   60           | GT
   61           | LT

   62 operator: ASTERISK
   63         | PLUS
   64         | MINUS
   65         | DIVIDE
   66         | LEFT_SHIFT
   67         | RIGHT_SHIFT
   68         | AMP
   69         | OR_BIT
   70         | AND_BIT
   71         | AND_EXP
   72         | OR_EXP

   73 cond_stmt: ifexp stmt n ELSE m stmt
   74          | ifexp stmt p

   75 ifexp: IF LP expr RP

   76 n: ε

   77 m: ε

   78 p: ε

   79 while_stmt: while_exp stmt

   80 while_exp: WHILE m LP expr RP

   81 return_stmt: RETURN expr SEMICOLON
   82            | RETURN SEMICOLON

   83 var_type: INT
   84         | FLOAT
   85         | CHAR

   86 array_elem: ID dims

   87 dims: LEFT_SQ_BRACKET expr RIGHT_SQ_BRACKET
   88     | dims LEFT_SQ_BRACKET expr RIGHT_SQ_BRACKET


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IF (258) 75
    ELSE (259) 73
    WHILE (260) 80
    DO (261)
    FOR (262)
    MAIN (263) 15 16
    STRUCT (264)
    RETURN (265) 81 82
    DEFAULT (266)
    CONST (267)
    BREAK (268)
    CONTINUE (269)
    GOTO (270)
    VOID <lex_val> (271) 14 16
    INT <lex_val> (272) 83
    FLOAT <lex_val> (273) 84
    CHAR <lex_val> (274) 85
    SEMICOLON (275) 5 36 39 81 82
    COMMA (276) 7 19 43
    LEFT_SQ_BRACKET (277) 9 87 88
    RIGHT_SQ_BRACKET (278) 9 87 88
    LEFT_CURLY_BRACKET (279) 11 34
    RIGHT_CURLY_BRACKET (280) 11 35
    LP (281) 12 40 48 75 80
    RP (282) 12 40 48 75 80
    PLUS <lex_val> (283) 63
    MINUS <lex_val> (284) 64
    ASTERISK <lex_val> (285) 62
    DIVIDE <lex_val> (286) 65
    DOT (287)
    DEREFERENCE (288)
    AMP <lex_val> (289) 68
    MODULO (290)
    ASSIGN_OP (291) 36
    AND_EXP <lex_val> (292) 71
    OR_EXP <lex_val> (293) 72
    NOT_EXP (294)
    RIGHT_SHIFT <lex_val> (295) 67
    LEFT_SHIFT <lex_val> (296) 66
    AND_BIT <lex_val> (297) 70
    OR_BIT <lex_val> (298) 69
    LT <lex_val> (299) 61
    GT <lex_val> (300) 60
    EQ <lex_val> (301) 59
    LTE <lex_val> (302) 57
    GTE <lex_val> (303) 58
    INTEGER <lex_val> (304) 9 54
    CHARACTER <lex_val> (305) 56
    STRING <lex_val> (306)
    REAL <lex_val> (307) 55
    ID <lex_val> (308) 8 13 14 21 37 40 47 51 86
    _THEN_ (309)
    _ELSE_ (310)
    "declaration" (311)


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    Start (58)
        on left: 1 2 3
        on right: 0 1 2
    Decl <node> (59)
        on left: 5
        on right: 1 26
    $@1 (60)
        on left: 4
        on right: 5
    L <node> (61)
        on left: 6 7
        on right: 5 7
    id_array <node> (62)
        on left: 8
        on right: 6 7
    DIMLIST <node> (63)
        on left: 9 10
        on right: 8 9
    function (64)
        on left: 11
        on right: 2
    func_head (65)
        on left: 12
        on right: 11
    res_id <node> (66)
        on left: 13 14 15 16
        on right: 12
    paramlist (67)
        on left: 17 18
        on right: 12
    params (68)
        on left: 19 20
        on right: 17 19
    param (69)
        on left: 21
        on right: 19 20
    body (70)
        on left: 22 23
        on right: 11
    stmt_list <node> (71)
        on left: 24 25
        on right: 22 24 33
    stmt <node> (72)
        on left: 26 27 28 29 30 31 32
        on right: 24 25 73 74 79
    scoped_stmt <node> (73)
        on left: 33
        on right: 32
    nest_begin (74)
        on left: 34
        on right: 33
    nest_end (75)
        on left: 35
        on right: 33
    asg <node> (76)
        on left: 36
        on right: 28
    lhs <node> (77)
        on left: 37 38
        on right: 36
    funccall_stmt <node> (78)
        on left: 39
        on right: 27
    func_call <node> (79)
        on left: 40
        on right: 39 49 52
    explist <node> (80)
        on left: 41 42
        on right: 40
    elist <node> (81)
        on left: 43 44
        on right: 41 43
    expr <node> (82)
        on left: 45 46 47 48 49 50 51 52 53
        on right: 36 43 44 48 50 51 52 53 75 80 81 87 88
    const <node> (83)
        on left: 54 55 56
        on right: 45 50
    comparator <lex_val> (84)
        on left: 57 58 59 60 61
        on right: 53
    operator <lex_val> (85)
        on left: 62 63 64 65 66 67 68 69 70 71 72
        on right: 50 51 52
    cond_stmt <node> (86)
        on left: 73 74
        on right: 29
    ifexp <node> (87)
        on left: 75
        on right: 73 74
    n <node> (88)
        on left: 76
        on right: 73
    m <node> (89)
        on left: 77
        on right: 73 80
    p (90)
        on left: 78
        on right: 74
    while_stmt <node> (91)
        on left: 79
        on right: 30
    while_exp <node> (92)
        on left: 80
        on right: 79
    return_stmt (93)
        on left: 81 82
        on right: 31
    var_type <node> (94)
        on left: 83 84 85
        on right: 5 13 15 21
    array_elem <node> (95)
        on left: 86
        on right: 38 46
    dims <node> (96)
        on left: 87 88
        on right: 86 88


State 0

    0 $accept: • Start $end

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4

    $default  reduce using rule 3 (Start)

    Start      go to state 5
    Decl       go to state 6
    function   go to state 7
    func_head  go to state 8
    res_id     go to state 9
    var_type   go to state 10


State 1

   14 res_id: VOID • ID
   16       | VOID • MAIN

    MAIN  shift, and go to state 11
    ID    shift, and go to state 12


State 2

   83 var_type: INT •

    $default  reduce using rule 83 (var_type)


State 3

   84 var_type: FLOAT •

    $default  reduce using rule 84 (var_type)


State 4

   85 var_type: CHAR •

    $default  reduce using rule 85 (var_type)


State 5

    0 $accept: Start • $end

    $end  shift, and go to state 13


State 6

    1 Start: Decl • Start

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4

    $default  reduce using rule 3 (Start)

    Start      go to state 14
    Decl       go to state 6
    function   go to state 7
    func_head  go to state 8
    res_id     go to state 9
    var_type   go to state 10


State 7

    2 Start: function • Start

    VOID   shift, and go to state 1
    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4

    $default  reduce using rule 3 (Start)

    Start      go to state 15
    Decl       go to state 6
    function   go to state 7
    func_head  go to state 8
    res_id     go to state 9
    var_type   go to state 10


State 8

   11 function: func_head • LEFT_CURLY_BRACKET body RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 16


State 9

   12 func_head: res_id • LP paramlist RP

    LP  shift, and go to state 17


State 10

    5 Decl: var_type • L SEMICOLON $@1
   13 res_id: var_type • ID
   15       | var_type • MAIN

    MAIN  shift, and go to state 18
    ID    shift, and go to state 19

    L         go to state 20
    id_array  go to state 21


State 11

   16 res_id: VOID MAIN •

    $default  reduce using rule 16 (res_id)


State 12

   14 res_id: VOID ID •

    $default  reduce using rule 14 (res_id)


State 13

    0 $accept: Start $end •

    $default  accept


State 14

    1 Start: Decl Start •

    $default  reduce using rule 1 (Start)


State 15

    2 Start: function Start •

    $default  reduce using rule 2 (Start)


State 16

   11 function: func_head LEFT_CURLY_BRACKET • body RIGHT_CURLY_BRACKET

    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    RETURN              shift, and go to state 24
    INT                 shift, and go to state 2
    FLOAT               shift, and go to state 3
    CHAR                shift, and go to state 4
    LEFT_CURLY_BRACKET  shift, and go to state 25
    ID                  shift, and go to state 26

    $default  reduce using rule 23 (body)

    Decl           go to state 27
    body           go to state 28
    stmt_list      go to state 29
    stmt           go to state 30
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 17

   12 func_head: res_id LP • paramlist RP

    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4

    $default  reduce using rule 18 (paramlist)

    paramlist  go to state 44
    params     go to state 45
    param      go to state 46
    var_type   go to state 47


State 18

   15 res_id: var_type MAIN •

    $default  reduce using rule 15 (res_id)


State 19

    8 id_array: ID • DIMLIST
   13 res_id: var_type ID •

    LP        reduce using rule 13 (res_id)
    $default  reduce using rule 10 (DIMLIST)

    DIMLIST  go to state 48


State 20

    5 Decl: var_type L • SEMICOLON $@1
    7 L: L • COMMA id_array

    SEMICOLON  shift, and go to state 49
    COMMA      shift, and go to state 50


State 21

    6 L: id_array •

    $default  reduce using rule 6 (L)


State 22

   75 ifexp: IF • LP expr RP

    LP  shift, and go to state 51


State 23

   80 while_exp: WHILE • m LP expr RP

    $default  reduce using rule 77 (m)

    m  go to state 52


State 24

   81 return_stmt: RETURN • expr SEMICOLON
   82            | RETURN • SEMICOLON

    SEMICOLON  shift, and go to state 53
    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 60
    const       go to state 61
    array_elem  go to state 62


State 25

   34 nest_begin: LEFT_CURLY_BRACKET •

    $default  reduce using rule 34 (nest_begin)


State 26

   37 lhs: ID •
   40 func_call: ID • LP explist RP
   86 array_elem: ID • dims

    LEFT_SQ_BRACKET  shift, and go to state 63
    LP               shift, and go to state 64

    $default  reduce using rule 37 (lhs)

    dims  go to state 65


State 27

   26 stmt: Decl •

    $default  reduce using rule 26 (stmt)


State 28

   11 function: func_head LEFT_CURLY_BRACKET body • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 66


State 29

   22 body: stmt_list •
   24 stmt_list: stmt_list • stmt

    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    RETURN              shift, and go to state 24
    INT                 shift, and go to state 2
    FLOAT               shift, and go to state 3
    CHAR                shift, and go to state 4
    LEFT_CURLY_BRACKET  shift, and go to state 25
    ID                  shift, and go to state 26

    $default  reduce using rule 22 (body)

    Decl           go to state 27
    stmt           go to state 67
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 30

   25 stmt_list: stmt •

    $default  reduce using rule 25 (stmt_list)


State 31

   32 stmt: scoped_stmt •

    $default  reduce using rule 32 (stmt)


State 32

   33 scoped_stmt: nest_begin • stmt_list nest_end

    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    RETURN              shift, and go to state 24
    INT                 shift, and go to state 2
    FLOAT               shift, and go to state 3
    CHAR                shift, and go to state 4
    LEFT_CURLY_BRACKET  shift, and go to state 25
    ID                  shift, and go to state 26

    Decl           go to state 27
    stmt_list      go to state 68
    stmt           go to state 30
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 33

   28 stmt: asg •

    $default  reduce using rule 28 (stmt)


State 34

   36 asg: lhs • ASSIGN_OP expr SEMICOLON

    ASSIGN_OP  shift, and go to state 69


State 35

   27 stmt: funccall_stmt •

    $default  reduce using rule 27 (stmt)


State 36

   39 funccall_stmt: func_call • SEMICOLON

    SEMICOLON  shift, and go to state 70


State 37

   29 stmt: cond_stmt •

    $default  reduce using rule 29 (stmt)


State 38

   73 cond_stmt: ifexp • stmt n ELSE m stmt
   74          | ifexp • stmt p

    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    RETURN              shift, and go to state 24
    INT                 shift, and go to state 2
    FLOAT               shift, and go to state 3
    CHAR                shift, and go to state 4
    LEFT_CURLY_BRACKET  shift, and go to state 25
    ID                  shift, and go to state 26

    Decl           go to state 27
    stmt           go to state 71
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 39

   30 stmt: while_stmt •

    $default  reduce using rule 30 (stmt)


State 40

   79 while_stmt: while_exp • stmt

    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    RETURN              shift, and go to state 24
    INT                 shift, and go to state 2
    FLOAT               shift, and go to state 3
    CHAR                shift, and go to state 4
    LEFT_CURLY_BRACKET  shift, and go to state 25
    ID                  shift, and go to state 26

    Decl           go to state 27
    stmt           go to state 72
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 41

   31 stmt: return_stmt •

    $default  reduce using rule 31 (stmt)


State 42

    5 Decl: var_type • L SEMICOLON $@1

    ID  shift, and go to state 73

    L         go to state 20
    id_array  go to state 21


State 43

   38 lhs: array_elem •

    $default  reduce using rule 38 (lhs)


State 44

   12 func_head: res_id LP paramlist • RP

    RP  shift, and go to state 74


State 45

   17 paramlist: params •
   19 params: params • COMMA param

    COMMA  shift, and go to state 75

    $default  reduce using rule 17 (paramlist)


State 46

   20 params: param •

    $default  reduce using rule 20 (params)


State 47

   21 param: var_type • ID

    ID  shift, and go to state 76


State 48

    8 id_array: ID DIMLIST •
    9 DIMLIST: DIMLIST • LEFT_SQ_BRACKET INTEGER RIGHT_SQ_BRACKET

    LEFT_SQ_BRACKET  shift, and go to state 77

    $default  reduce using rule 8 (id_array)


State 49

    5 Decl: var_type L SEMICOLON • $@1

    $default  reduce using rule 4 ($@1)

    $@1  go to state 78


State 50

    7 L: L COMMA • id_array

    ID  shift, and go to state 73

    id_array  go to state 79


State 51

   75 ifexp: IF LP • expr RP

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 80
    const       go to state 61
    array_elem  go to state 62


State 52

   80 while_exp: WHILE m • LP expr RP

    LP  shift, and go to state 81


State 53

   82 return_stmt: RETURN SEMICOLON •

    $default  reduce using rule 82 (return_stmt)


State 54

   48 expr: LP • expr RP

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 82
    const       go to state 61
    array_elem  go to state 62


State 55

   54 const: INTEGER •

    $default  reduce using rule 54 (const)


State 56

   56 const: CHARACTER •

    $default  reduce using rule 56 (const)


State 57

   55 const: REAL •

    $default  reduce using rule 55 (const)


State 58

   40 func_call: ID • LP explist RP
   47 expr: ID •
   51     | ID • operator expr
   86 array_elem: ID • dims

    LEFT_SQ_BRACKET  shift, and go to state 63
    LP               shift, and go to state 64
    PLUS             shift, and go to state 83
    MINUS            shift, and go to state 84
    ASTERISK         shift, and go to state 85
    DIVIDE           shift, and go to state 86
    AMP              shift, and go to state 87
    AND_EXP          shift, and go to state 88
    OR_EXP           shift, and go to state 89
    RIGHT_SHIFT      shift, and go to state 90
    LEFT_SHIFT       shift, and go to state 91
    AND_BIT          shift, and go to state 92
    OR_BIT           shift, and go to state 93

    $default  reduce using rule 47 (expr)

    operator  go to state 94
    dims      go to state 65


State 59

   49 expr: func_call •
   52     | func_call • operator expr

    PLUS         shift, and go to state 83
    MINUS        shift, and go to state 84
    ASTERISK     shift, and go to state 85
    DIVIDE       shift, and go to state 86
    AMP          shift, and go to state 87
    AND_EXP      shift, and go to state 88
    OR_EXP       shift, and go to state 89
    RIGHT_SHIFT  shift, and go to state 90
    LEFT_SHIFT   shift, and go to state 91
    AND_BIT      shift, and go to state 92
    OR_BIT       shift, and go to state 93

    $default  reduce using rule 49 (expr)

    operator  go to state 95


State 60

   53 expr: expr • comparator expr
   81 return_stmt: RETURN expr • SEMICOLON

    SEMICOLON  shift, and go to state 96
    LT         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    LTE        shift, and go to state 100
    GTE        shift, and go to state 101

    comparator  go to state 102


State 61

   45 expr: const •
   50     | const • operator expr

    PLUS         shift, and go to state 83
    MINUS        shift, and go to state 84
    ASTERISK     shift, and go to state 85
    DIVIDE       shift, and go to state 86
    AMP          shift, and go to state 87
    AND_EXP      shift, and go to state 88
    OR_EXP       shift, and go to state 89
    RIGHT_SHIFT  shift, and go to state 90
    LEFT_SHIFT   shift, and go to state 91
    AND_BIT      shift, and go to state 92
    OR_BIT       shift, and go to state 93

    $default  reduce using rule 45 (expr)

    operator  go to state 103


State 62

   46 expr: array_elem •

    $default  reduce using rule 46 (expr)


State 63

   87 dims: LEFT_SQ_BRACKET • expr RIGHT_SQ_BRACKET

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 104
    const       go to state 61
    array_elem  go to state 62


State 64

   40 func_call: ID LP • explist RP

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    $default  reduce using rule 42 (explist)

    func_call   go to state 59
    explist     go to state 105
    elist       go to state 106
    expr        go to state 107
    const       go to state 61
    array_elem  go to state 62


State 65

   86 array_elem: ID dims •
   88 dims: dims • LEFT_SQ_BRACKET expr RIGHT_SQ_BRACKET

    LEFT_SQ_BRACKET  shift, and go to state 108

    $default  reduce using rule 86 (array_elem)


State 66

   11 function: func_head LEFT_CURLY_BRACKET body RIGHT_CURLY_BRACKET •

    $default  reduce using rule 11 (function)


State 67

   24 stmt_list: stmt_list stmt •

    $default  reduce using rule 24 (stmt_list)


State 68

   24 stmt_list: stmt_list • stmt
   33 scoped_stmt: nest_begin stmt_list • nest_end

    IF                   shift, and go to state 22
    WHILE                shift, and go to state 23
    RETURN               shift, and go to state 24
    INT                  shift, and go to state 2
    FLOAT                shift, and go to state 3
    CHAR                 shift, and go to state 4
    LEFT_CURLY_BRACKET   shift, and go to state 25
    RIGHT_CURLY_BRACKET  shift, and go to state 109
    ID                   shift, and go to state 26

    Decl           go to state 27
    stmt           go to state 67
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    nest_end       go to state 110
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 69

   36 asg: lhs ASSIGN_OP • expr SEMICOLON

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 111
    const       go to state 61
    array_elem  go to state 62


State 70

   39 funccall_stmt: func_call SEMICOLON •

    $default  reduce using rule 39 (funccall_stmt)


State 71

   73 cond_stmt: ifexp stmt • n ELSE m stmt
   74          | ifexp stmt • p

    ELSE      reduce using rule 76 (n)
    ELSE      [reduce using rule 78 (p)]
    $default  reduce using rule 78 (p)

    n  go to state 112
    p  go to state 113


State 72

   79 while_stmt: while_exp stmt •

    $default  reduce using rule 79 (while_stmt)


State 73

    8 id_array: ID • DIMLIST

    $default  reduce using rule 10 (DIMLIST)

    DIMLIST  go to state 48


State 74

   12 func_head: res_id LP paramlist RP •

    $default  reduce using rule 12 (func_head)


State 75

   19 params: params COMMA • param

    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4

    param     go to state 114
    var_type  go to state 47


State 76

   21 param: var_type ID •

    $default  reduce using rule 21 (param)


State 77

    9 DIMLIST: DIMLIST LEFT_SQ_BRACKET • INTEGER RIGHT_SQ_BRACKET

    INTEGER  shift, and go to state 115


State 78

    5 Decl: var_type L SEMICOLON $@1 •

    $default  reduce using rule 5 (Decl)


State 79

    7 L: L COMMA id_array •

    $default  reduce using rule 7 (L)


State 80

   53 expr: expr • comparator expr
   75 ifexp: IF LP expr • RP

    RP   shift, and go to state 116
    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    comparator  go to state 102


State 81

   80 while_exp: WHILE m LP • expr RP

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 117
    const       go to state 61
    array_elem  go to state 62


State 82

   48 expr: LP expr • RP
   53     | expr • comparator expr

    RP   shift, and go to state 118
    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    comparator  go to state 102


State 83

   63 operator: PLUS •

    $default  reduce using rule 63 (operator)


State 84

   64 operator: MINUS •

    $default  reduce using rule 64 (operator)


State 85

   62 operator: ASTERISK •

    $default  reduce using rule 62 (operator)


State 86

   65 operator: DIVIDE •

    $default  reduce using rule 65 (operator)


State 87

   68 operator: AMP •

    $default  reduce using rule 68 (operator)


State 88

   71 operator: AND_EXP •

    $default  reduce using rule 71 (operator)


State 89

   72 operator: OR_EXP •

    $default  reduce using rule 72 (operator)


State 90

   67 operator: RIGHT_SHIFT •

    $default  reduce using rule 67 (operator)


State 91

   66 operator: LEFT_SHIFT •

    $default  reduce using rule 66 (operator)


State 92

   70 operator: AND_BIT •

    $default  reduce using rule 70 (operator)


State 93

   69 operator: OR_BIT •

    $default  reduce using rule 69 (operator)


State 94

   51 expr: ID operator • expr

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 119
    const       go to state 61
    array_elem  go to state 62


State 95

   52 expr: func_call operator • expr

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 120
    const       go to state 61
    array_elem  go to state 62


State 96

   81 return_stmt: RETURN expr SEMICOLON •

    $default  reduce using rule 81 (return_stmt)


State 97

   61 comparator: LT •

    $default  reduce using rule 61 (comparator)


State 98

   60 comparator: GT •

    $default  reduce using rule 60 (comparator)


State 99

   59 comparator: EQ •

    $default  reduce using rule 59 (comparator)


State 100

   57 comparator: LTE •

    $default  reduce using rule 57 (comparator)


State 101

   58 comparator: GTE •

    $default  reduce using rule 58 (comparator)


State 102

   53 expr: expr comparator • expr

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 121
    const       go to state 61
    array_elem  go to state 62


State 103

   50 expr: const operator • expr

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 122
    const       go to state 61
    array_elem  go to state 62


State 104

   53 expr: expr • comparator expr
   87 dims: LEFT_SQ_BRACKET expr • RIGHT_SQ_BRACKET

    RIGHT_SQ_BRACKET  shift, and go to state 123
    LT                shift, and go to state 97
    GT                shift, and go to state 98
    EQ                shift, and go to state 99
    LTE               shift, and go to state 100
    GTE               shift, and go to state 101

    comparator  go to state 102


State 105

   40 func_call: ID LP explist • RP

    RP  shift, and go to state 124


State 106

   41 explist: elist •
   43 elist: elist • COMMA expr

    COMMA  shift, and go to state 125

    $default  reduce using rule 41 (explist)


State 107

   44 elist: expr •
   53 expr: expr • comparator expr

    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    $default  reduce using rule 44 (elist)

    comparator  go to state 102


State 108

   88 dims: dims LEFT_SQ_BRACKET • expr RIGHT_SQ_BRACKET

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 126
    const       go to state 61
    array_elem  go to state 62


State 109

   35 nest_end: RIGHT_CURLY_BRACKET •

    $default  reduce using rule 35 (nest_end)


State 110

   33 scoped_stmt: nest_begin stmt_list nest_end •

    $default  reduce using rule 33 (scoped_stmt)


State 111

   36 asg: lhs ASSIGN_OP expr • SEMICOLON
   53 expr: expr • comparator expr

    SEMICOLON  shift, and go to state 127
    LT         shift, and go to state 97
    GT         shift, and go to state 98
    EQ         shift, and go to state 99
    LTE        shift, and go to state 100
    GTE        shift, and go to state 101

    comparator  go to state 102


State 112

   73 cond_stmt: ifexp stmt n • ELSE m stmt

    ELSE  shift, and go to state 128


State 113

   74 cond_stmt: ifexp stmt p •

    $default  reduce using rule 74 (cond_stmt)


State 114

   19 params: params COMMA param •

    $default  reduce using rule 19 (params)


State 115

    9 DIMLIST: DIMLIST LEFT_SQ_BRACKET INTEGER • RIGHT_SQ_BRACKET

    RIGHT_SQ_BRACKET  shift, and go to state 129


State 116

   75 ifexp: IF LP expr RP •

    $default  reduce using rule 75 (ifexp)


State 117

   53 expr: expr • comparator expr
   80 while_exp: WHILE m LP expr • RP

    RP   shift, and go to state 130
    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    comparator  go to state 102


State 118

   48 expr: LP expr RP •

    $default  reduce using rule 48 (expr)


State 119

   51 expr: ID operator expr •
   53     | expr • comparator expr

    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    LT        [reduce using rule 51 (expr)]
    GT        [reduce using rule 51 (expr)]
    EQ        [reduce using rule 51 (expr)]
    LTE       [reduce using rule 51 (expr)]
    GTE       [reduce using rule 51 (expr)]
    $default  reduce using rule 51 (expr)

    comparator  go to state 102


State 120

   52 expr: func_call operator expr •
   53     | expr • comparator expr

    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    LT        [reduce using rule 52 (expr)]
    GT        [reduce using rule 52 (expr)]
    EQ        [reduce using rule 52 (expr)]
    LTE       [reduce using rule 52 (expr)]
    GTE       [reduce using rule 52 (expr)]
    $default  reduce using rule 52 (expr)

    comparator  go to state 102


State 121

   53 expr: expr • comparator expr
   53     | expr comparator expr •

    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    LT        [reduce using rule 53 (expr)]
    GT        [reduce using rule 53 (expr)]
    EQ        [reduce using rule 53 (expr)]
    LTE       [reduce using rule 53 (expr)]
    GTE       [reduce using rule 53 (expr)]
    $default  reduce using rule 53 (expr)

    comparator  go to state 102


State 122

   50 expr: const operator expr •
   53     | expr • comparator expr

    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    LT        [reduce using rule 50 (expr)]
    GT        [reduce using rule 50 (expr)]
    EQ        [reduce using rule 50 (expr)]
    LTE       [reduce using rule 50 (expr)]
    GTE       [reduce using rule 50 (expr)]
    $default  reduce using rule 50 (expr)

    comparator  go to state 102


State 123

   87 dims: LEFT_SQ_BRACKET expr RIGHT_SQ_BRACKET •

    $default  reduce using rule 87 (dims)


State 124

   40 func_call: ID LP explist RP •

    $default  reduce using rule 40 (func_call)


State 125

   43 elist: elist COMMA • expr

    LP         shift, and go to state 54
    INTEGER    shift, and go to state 55
    CHARACTER  shift, and go to state 56
    REAL       shift, and go to state 57
    ID         shift, and go to state 58

    func_call   go to state 59
    expr        go to state 131
    const       go to state 61
    array_elem  go to state 62


State 126

   53 expr: expr • comparator expr
   88 dims: dims LEFT_SQ_BRACKET expr • RIGHT_SQ_BRACKET

    RIGHT_SQ_BRACKET  shift, and go to state 132
    LT                shift, and go to state 97
    GT                shift, and go to state 98
    EQ                shift, and go to state 99
    LTE               shift, and go to state 100
    GTE               shift, and go to state 101

    comparator  go to state 102


State 127

   36 asg: lhs ASSIGN_OP expr SEMICOLON •

    $default  reduce using rule 36 (asg)


State 128

   73 cond_stmt: ifexp stmt n ELSE • m stmt

    $default  reduce using rule 77 (m)

    m  go to state 133


State 129

    9 DIMLIST: DIMLIST LEFT_SQ_BRACKET INTEGER RIGHT_SQ_BRACKET •

    $default  reduce using rule 9 (DIMLIST)


State 130

   80 while_exp: WHILE m LP expr RP •

    $default  reduce using rule 80 (while_exp)


State 131

   43 elist: elist COMMA expr •
   53 expr: expr • comparator expr

    LT   shift, and go to state 97
    GT   shift, and go to state 98
    EQ   shift, and go to state 99
    LTE  shift, and go to state 100
    GTE  shift, and go to state 101

    $default  reduce using rule 43 (elist)

    comparator  go to state 102


State 132

   88 dims: dims LEFT_SQ_BRACKET expr RIGHT_SQ_BRACKET •

    $default  reduce using rule 88 (dims)


State 133

   73 cond_stmt: ifexp stmt n ELSE m • stmt

    IF                  shift, and go to state 22
    WHILE               shift, and go to state 23
    RETURN              shift, and go to state 24
    INT                 shift, and go to state 2
    FLOAT               shift, and go to state 3
    CHAR                shift, and go to state 4
    LEFT_CURLY_BRACKET  shift, and go to state 25
    ID                  shift, and go to state 26

    Decl           go to state 27
    stmt           go to state 134
    scoped_stmt    go to state 31
    nest_begin     go to state 32
    asg            go to state 33
    lhs            go to state 34
    funccall_stmt  go to state 35
    func_call      go to state 36
    cond_stmt      go to state 37
    ifexp          go to state 38
    while_stmt     go to state 39
    while_exp      go to state 40
    return_stmt    go to state 41
    var_type       go to state 42
    array_elem     go to state 43


State 134

   73 cond_stmt: ifexp stmt n ELSE m stmt •

    $default  reduce using rule 73 (cond_stmt)
